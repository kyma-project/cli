// Code generated by mockery v2.33.3. DO NOT EDIT.

package automock

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	httpstream "k8s.io/apimachinery/pkg/util/httpstream"

	time "time"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Connection) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseChan provides a mock function with given fields:
func (_m *Connection) CloseChan() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// CreateStream provides a mock function with given fields: headers
func (_m *Connection) CreateStream(headers http.Header) (httpstream.Stream, error) {
	ret := _m.Called(headers)

	var r0 httpstream.Stream
	var r1 error
	if rf, ok := ret.Get(0).(func(http.Header) (httpstream.Stream, error)); ok {
		return rf(headers)
	}
	if rf, ok := ret.Get(0).(func(http.Header) httpstream.Stream); ok {
		r0 = rf(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(httpstream.Stream)
		}
	}

	if rf, ok := ret.Get(1).(func(http.Header) error); ok {
		r1 = rf(headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveStreams provides a mock function with given fields: streams
func (_m *Connection) RemoveStreams(streams ...httpstream.Stream) {
	_va := make([]interface{}, len(streams))
	for _i := range streams {
		_va[_i] = streams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetIdleTimeout provides a mock function with given fields: timeout
func (_m *Connection) SetIdleTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
