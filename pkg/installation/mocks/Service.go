// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	installation "github.com/kyma-incubator/hydroform/install/installation"
	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckInstallationState provides a mock function with given fields: kubeconfig
func (_m *Service) CheckInstallationState(kubeconfig *rest.Config) (installation.InstallationState, error) {
	ret := _m.Called(kubeconfig)

	var r0 installation.InstallationState
	if rf, ok := ret.Get(0).(func(*rest.Config) installation.InstallationState); ok {
		r0 = rf(kubeconfig)
	} else {
		r0 = ret.Get(0).(installation.InstallationState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*rest.Config) error); ok {
		r1 = rf(kubeconfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerInstallation provides a mock function with given fields: installerYaml, installerCRYaml, configuration
func (_m *Service) TriggerInstallation(installerYaml string, installerCRYaml string, configuration installation.Configuration) error {
	ret := _m.Called(installerYaml, installerCRYaml, configuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, installation.Configuration) error); ok {
		r0 = rf(installerYaml, installerCRYaml, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerUninstall provides a mock function with given fields: kubeconfig
func (_m *Service) TriggerUninstall(kubeconfig *rest.Config) error {
	ret := _m.Called(kubeconfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rest.Config) error); ok {
		r0 = rf(kubeconfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerUpgrade provides a mock function with given fields: installerYaml, installerCRYaml, configuration
func (_m *Service) TriggerUpgrade(installerYaml string, installerCRYaml string, configuration installation.Configuration) error {
	ret := _m.Called(installerYaml, installerCRYaml, configuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, installation.Configuration) error); ok {
		r0 = rf(installerYaml, installerCRYaml, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
