// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	installation "github.com/kyma-incubator/hydroform/install/installation"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/kyma-project/kyma/components/kyma-operator/pkg/client/clientset/versioned/typed/installer/v1alpha1"
)

// Installer is an autogenerated mock type for the Installer type
type Installer struct {
	mock.Mock
}

// CheckInstallationState provides a mock function with given fields: installationClient
func (_m *Installer) CheckInstallationState(installationClient v1alpha1.InstallationInterface) (installation.InstallationState, error) {
	ret := _m.Called(installationClient)

	var r0 installation.InstallationState
	if rf, ok := ret.Get(0).(func(v1alpha1.InstallationInterface) installation.InstallationState); ok {
		r0 = rf(installationClient)
	} else {
		r0 = ret.Get(0).(installation.InstallationState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1alpha1.InstallationInterface) error); ok {
		r1 = rf(installationClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareInstallation provides a mock function with given fields: _a0
func (_m *Installer) PrepareInstallation(_a0 installation.Installation) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(installation.Installation) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrepareUpgrade provides a mock function with given fields: artifacts
func (_m *Installer) PrepareUpgrade(artifacts installation.Installation) error {
	ret := _m.Called(artifacts)

	var r0 error
	if rf, ok := ret.Get(0).(func(installation.Installation) error); ok {
		r0 = rf(artifacts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartInstallation provides a mock function with given fields: _a0
func (_m *Installer) StartInstallation(_a0 context.Context) (<-chan installation.InstallationState, <-chan error, error) {
	ret := _m.Called(_a0)

	var r0 <-chan installation.InstallationState
	if rf, ok := ret.Get(0).(func(context.Context) <-chan installation.InstallationState); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan installation.InstallationState)
		}
	}

	var r1 <-chan error
	if rf, ok := ret.Get(1).(func(context.Context) <-chan error); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TriggerUninstall provides a mock function with given fields: installationClient
func (_m *Installer) TriggerUninstall(installationClient v1alpha1.InstallationInterface) error {
	ret := _m.Called(installationClient)

	var r0 error
	if rf, ok := ret.Get(0).(func(v1alpha1.InstallationInterface) error); ok {
		r0 = rf(installationClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
